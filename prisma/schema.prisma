// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
//npx prisma generate 
//npx prisma db push
//npx prisma studio
//npx prisma migrate reset
generator client {
  provider = "prisma-client-js"
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


enum UserRole {
  ADMIN
  USER  
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  catches              Catch[]
  reviews              Review[]
  notifications        Notification[]
  fishingLogs          FishingLog[]
  videos               Video[]
  following            Follow[]               @relation("Following")
  followers            Follow[]               @relation("Followers")
   favorites             Favorite[]
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation twoFactorConfirmation?

}

model Catch {
  id                   String    @id @default(cuid())
  userId               String
  description          String
  imageUrl             String
  location             String
  tags                 CatchTag[]
  favoritedBy          Favorite[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id])
  reviews              Review[]
}
model CatchTag {
  catchId String
  tagId   String
  catch   Catch   @relation(fields: [catchId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([catchId, tagId])
}
model Tag {
  id       String  @id @default(cuid())
  name     String  @unique
  catches  CatchTag[]
}

model Favorite {
  catchId  String
  userId   String
  catch    Catch  @relation(fields: [catchId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([catchId, userId])
  @@map("favorites")
}

model Review {
  id                   String    @id @default(cuid())
  userId               String
  catchId              String
  rating               Int       @default(0)
  comment              String?
  createdAt            DateTime  @default(now())
  user                 User      @relation(fields: [userId], references: [id])
  catch                Catch     @relation(fields: [catchId], references: [id])
}
model Video {
  id                   String    @id @default(cuid())
  userId               String
  url                  String
  description          String?
  createdAt            DateTime  @default(now())
  user                 User      @relation(fields: [userId], references: [id])
}
model FishingLog {
  id                   String    @id @default(cuid())
  userId               String
  statistics           Json
  createdAt            DateTime  @default(now())
  user                 User      @relation(fields: [userId], references: [id])
}
model Notification {
  id                   String    @id @default(cuid())
  userId               String
  message              String
  createdAt            DateTime  @default(now())
  user                 User      @relation(fields: [userId], references: [id])
}

model Follow {
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String @map("follower_id")
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String @map("following_id")
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
  @@map("follows")
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])

}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

   @@unique([email,token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

   @@unique([email,token])
}

model twoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields:[userId],references:[id],onDelete:Cascade)

  @@unique([userId])
  
}


